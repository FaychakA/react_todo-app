{"version":3,"sources":["components/TodoApp/TodoApp.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","currentValue","handleValue","event","setState","target","value","handleAddTodo","preventDefault","props","addTodo","title","id","Date","completed","onSubmit","this","className","placeholder","onChange","React","Component","TodoList","handleAllToggle","changeAllCompleted","handleToggle","changeCompleted","filt","arr","filter","el","handleRemove","remove","type","checked","toggleAll","htmlFor","items","length","map","key","onClick","TodosFilter","handleFilter","filterName","clearCompleted","clear","todos","href","isVisible","App","newTodo","check","every","newArray","handleClear","isAnyElementCompleted","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25ea6ec5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    currentValue: '',\n  };\n\n  handleValue = (event) => {\n    this.setState({\n      currentValue: event.target.value,\n    });\n  };\n\n  handleAddTodo = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      currentValue: '',\n    });\n    this.props.addTodo({\n      title: this.state.currentValue,\n      id: +new Date(),\n      completed: false,\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleAddTodo}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={this.state.currentValue}\n          onChange={this.handleValue}\n        />\n      </form>\n    );\n  }\n}\n\nexport default TodoApp;\n\nTodoApp.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoList extends React.Component {\n  handleAllToggle = () => {\n    this.props.changeAllCompleted();\n  };\n\n  handleToggle = (id) => {\n    this.props.changeCompleted(id);\n  };\n\n  filt = (arr) => {\n    if (this.props.filter === 'All') {\n      return arr;\n    }\n\n    if (this.props.filter === 'Active') {\n      return arr.filter(el => !el.completed);\n    }\n\n    if (this.props.filter === 'Completed') {\n      return arr.filter(el => el.completed);\n    }\n\n    return null;\n  };\n\n  handleRemove = (event) => {\n    this.props.remove(+event.target.id);\n  };\n\n  render() {\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={this.props.toggleAll}\n          onChange={this.handleAllToggle}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <ul className=\"todo-list\">\n          {this.filt(this.props.items).length === 0\n          || this.filt(this.props.items).map(el => (\n            <li\n              key={el.id}\n              className={el.completed ? 'completed' : ''}\n            >\n              <div className=\"view\">\n                <input\n                  type=\"checkbox\"\n                  className=\"toggle\"\n                  id={`todo-${el.id}`}\n                  checked={el.completed}\n                  onChange={() => this.handleToggle(el.id)}\n                />\n                <label htmlFor={`todo-${el.id}`}>{el.title}</label>\n                <button\n                  type=\"button\"\n                  className=\"destroy\"\n                  id={el.id}\n                  onClick={this.handleRemove}\n                />\n              </div>\n              <input type=\"text\" className=\"edit\" />\n            </li>\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  toggleAll: PropTypes.bool.isRequired,\n  changeAllCompleted: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodosFilter extends React.Component {\n  handleFilter = (filterName) => {\n    this.props.handleFilter(filterName);\n  };\n\n  clearCompleted = () => {\n    this.props.clear();\n  };\n\n  render() {\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {`${this.props.todos.filter(el => el.completed === false)\n            .length\n          } items left`}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className=\"selected\"\n              onClick={() => this.handleFilter('All')}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              onClick={() => this.handleFilter('Active')}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={() => this.handleFilter('Completed')}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n        {this.props.isVisible && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        )}\n      </footer>\n    );\n  }\n}\n\nexport default TodosFilter;\n\nTodosFilter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n  isVisible: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport TodoApp from './components/TodoApp/TodoApp';\nimport TodoList from './components/TodoList/TodoList';\nimport TodosFilter from './components/TodosFilter/TodosFilter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    toggleAll: false,\n    filterName: 'All',\n    isVisible: false,\n  };\n\n  addTodo = (newTodo) => {\n    this.setState(({ todos }) => ({\n      todos: [...todos, newTodo],\n      toggleAll: false,\n    }));\n  };\n\n  changeCompleted = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map(el => (el.id === id\n        ? {\n          ...el, completed: !el.completed,\n        }\n        : el)),\n      toggleAll: false,\n    }), () => this.check());\n  };\n\n  changeAllCompleted = () => {\n    if (this.state.todos.every(el => el.completed === false)) {\n      this.setState(state => ({\n        todos: state.todos.map(el => ({\n          ...el,\n          completed: !el.completed,\n        })),\n        toggleAll: true,\n      }), () => this.check());\n\n      return;\n    }\n\n    if (this.state.todos.every(el => el.completed === true)) {\n      this.setState(state => ({\n        todos: state.todos.map(el => ({\n          ...el,\n          completed: !el.completed,\n        })),\n        toggleAll: false,\n      }), () => this.check());\n\n      return;\n    }\n\n    this.setState(state => ({\n      todos: state.todos.map(el => ({\n        ...el,\n        completed: true,\n      })),\n      toggleAll: true,\n    }));\n  };\n\n  handleFilter = (filterName) => {\n    this.setState({\n      filterName,\n    });\n  };\n\n  remove = (id) => {\n    const { todos } = this.state;\n    const newArray = todos.filter(el => el.id !== id);\n\n    this.setState({\n      todos: newArray,\n    });\n  };\n\n  handleClear = () => {\n    const { todos } = this.state;\n    const newArray = todos.filter(el => !el.completed);\n\n    this.setState({\n      todos: newArray,\n      isVisible: false,\n    });\n  };\n\n  check = () => {\n    const { todos } = this.state;\n    const isAnyElementCompleted = todos.some(el => el.completed);\n\n    this.setState({\n      isVisible: isAnyElementCompleted,\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <TodoApp addTodo={this.addTodo} />\n        </header>\n\n        <TodoList\n          items={this.state.todos}\n          filter={this.state.filterName}\n          changeCompleted={this.changeCompleted}\n          toggleAll={this.state.toggleAll}\n          changeAllCompleted={this.changeAllCompleted}\n          remove={this.remove}\n        />\n\n        <TodosFilter\n          todos={this.state.todos}\n          handleFilter={this.handleFilter}\n          clear={this.handleClear}\n          isVisible={this.state.isVisible}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}