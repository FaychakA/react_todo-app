{"version":3,"sources":["components/TodoApp/TodoApp.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","App.js","index.js"],"names":["TodoApp","state","currentValue","handleValue","event","setState","target","value","handleAddTodo","preventDefault","split","join","props","addTodo","title","id","Date","completed","onSubmit","this","className","placeholder","onChange","React","Component","TodoList","items","filter","changeCompleted","isToggledAll","changeAllCompleted","removeTodo","onFiltered","arr","el","onRemove","type","checked","htmlFor","length","map","key","onClick","TodosFilter","todos","handleFilter","handleClearCompleted","isVisible","onFilter","filterName","href","App","newTodo","checkAnythingCompleted","every","newArray","isAnyElementCompleted","some","initialState","localStorage","getItem","parsedState","JSON","parse","stringifiedState","stringify","setItem","ReactDOM","render","document","getElementById"],"mappings":"oQA4CeA,E,4MAxCbC,MAAQ,CACNC,aAAc,I,EAGhBC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZH,aAAcE,EAAME,OAAOC,S,EAI/BC,cAAgB,SAACJ,GACfA,EAAMK,iBAEN,EAAKJ,SAAS,CACZH,aAAc,KAGZ,EAAKD,MAAMC,aAAaQ,MAAM,KAAKC,KAAK,KAC1C,EAAKC,MAAMC,QAAQ,CACjBC,MAAO,EAAKb,MAAMC,aAClBa,IAAK,IAAIC,KACTC,WAAW,K,uDAMf,OACE,0BAAMC,SAAUC,KAAKX,eACnB,2BACEY,UAAU,WACVC,YAAY,yBACZd,MAAOY,KAAKlB,MAAMC,aAClBoB,SAAUH,KAAKhB,mB,GAlCHoB,IAAMC,WC4EbC,EA5EE,SAAC,GASZ,IAPFC,EAOC,EAPDA,MACAC,EAMC,EANDA,OACAC,EAKC,EALDA,gBACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,mBACAC,EAEC,EAFDA,WAOIC,EAAa,SAACC,GAClB,MAAe,QAAXN,EACKM,EAGM,WAAXN,EACKM,EAAIN,QAAO,SAAAO,GAAE,OAAKA,EAAGjB,aAGf,cAAXU,EACKM,EAAIN,QAAO,SAAAO,GAAE,OAAIA,EAAGjB,aAGtB,MAGHkB,EAAW,SAAC/B,GAChB2B,GAAY3B,EAAME,OAAOS,KAG3B,OACE,6BAASK,UAAU,QACjB,2BACEgB,KAAK,WACLrB,GAAG,aACHK,UAAU,aACViB,QAASR,EACTP,SAAU,kBAAMQ,OAElB,2BAAOQ,QAAQ,cAAf,wBAEA,wBAAIlB,UAAU,aACkB,IAA7BY,EAAWN,GAAOa,QAChBP,EAAWN,GAAOc,KAAI,SAAAN,GAAE,OACzB,wBACEO,IAAKP,EAAGnB,GACRK,UAAWc,EAAGjB,UAAY,YAAc,IAExC,yBAAKG,UAAU,QACb,2BACEgB,KAAK,WACLhB,UAAU,SACVL,GAAE,eAAUmB,EAAGnB,IACfsB,QAASH,EAAGjB,UACZK,SAAU,kBAhDNP,EAgDqBmB,EAAGnB,QA/CxCa,EAAgBb,GADD,IAACA,KAkDN,2BAAOuB,QAAO,eAAUJ,EAAGnB,KAAOmB,EAAGpB,OACrC,4BACEsB,KAAK,SACLhB,UAAU,UACVL,GAAImB,EAAGnB,GACP2B,QAASP,KAGb,2BAAOC,KAAK,OAAOhB,UAAU,gBCH1BuB,EAjEK,SAAC,GAOf,IALFC,EAKC,EALDA,MACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,qBACAC,EAEC,EAFDA,UAGIC,EAAW,SAACC,GAChBJ,EAAaI,IAOf,OACE,4BAAQ7B,UAAU,UAChB,0BAAMA,UAAU,cAAhB,UACMwB,EAAMjB,QAAO,SAAAO,GAAE,OAAqB,IAAjBA,EAAGjB,aACvBsB,OAFL,gBAKA,wBAAInB,UAAU,WACZ,4BACE,uBACE8B,KAAK,KACL9B,UAAU,WACVsB,QAAS,kBAAMM,EAAS,SAH1B,QASF,4BACE,uBACEE,KAAK,WACLR,QAAS,kBAAMM,EAAS,YAF1B,WAQF,4BACE,uBACEE,KAAK,cACLR,QAAS,kBAAMM,EAAS,eAF1B,eAQHD,GACC,4BACEX,KAAK,SACLhB,UAAU,kBACVsB,QA5CY,WAClBI,MAwCI,qBC4FOK,E,4MA5IblD,MAAQ,CACN2C,MAAO,GACPf,cAAc,EACdoB,WAAY,MACZF,WAAW,G,EAoBblC,QAAU,SAACuC,GACT,EAAK/C,UAAS,gBAAGuC,EAAH,EAAGA,MAAH,MAAgB,CAC5BA,MAAM,GAAD,mBAAMA,GAAN,CAAaQ,IAClBvB,cAAc,O,EAIlBD,gBAAkB,SAACb,GACjB,EAAKV,UAAS,SAAAJ,GAAK,MAAK,CACtB2C,MAAO3C,EAAM2C,MAAMJ,KAAI,SAAAN,GAAE,OAAKA,EAAGnB,KAAOA,EAAV,2BAEvBmB,GAFuB,IAG1BjB,WAAYiB,EAAGjB,YAEfiB,KACJL,cAAc,MACZ,kBAAM,EAAKwB,6B,EAGjBvB,mBAAqB,WACf,EAAK7B,MAAM2C,MAAMU,OAAM,SAAApB,GAAE,OAAqB,IAAjBA,EAAGjB,aAClC,EAAKZ,UAAS,SAAAJ,GAAK,MAAK,CACtB2C,MAAO3C,EAAM2C,MAAMJ,KAAI,SAAAN,GAAE,kCACpBA,GADoB,IAEvBjB,WAAYiB,EAAGjB,eAEjBY,cAAc,MACZ,kBAAM,EAAKwB,4BAKb,EAAKpD,MAAM2C,MAAMU,OAAM,SAAApB,GAAE,OAAqB,IAAjBA,EAAGjB,aAClC,EAAKZ,UAAS,SAAAJ,GAAK,MAAK,CACtB2C,MAAO3C,EAAM2C,MAAMJ,KAAI,SAAAN,GAAE,kCACpBA,GADoB,IAEvBjB,WAAYiB,EAAGjB,eAEjBY,cAAc,MACZ,kBAAM,EAAKwB,4BAKjB,EAAKhD,UAAS,SAAAJ,GAAK,MAAK,CACtB2C,MAAO3C,EAAM2C,MAAMJ,KAAI,SAAAN,GAAE,kCACpBA,GADoB,IAEvBjB,WAAW,OAEbY,cAAc,O,EAIlBgB,aAAe,SAACI,GACd,EAAK5C,SAAS,CACZ4C,gB,EAIJlB,WAAa,SAAChB,GAAQ,IAEdwC,EADY,EAAKtD,MAAf2C,MACejB,QAAO,SAAAO,GAAE,OAAIA,EAAGnB,KAAOA,KAE9C,EAAKV,SAAS,CACZuC,MAAOW,K,EAIXT,qBAAuB,WAAO,IAEtBS,EADY,EAAKtD,MAAf2C,MACejB,QAAO,SAAAO,GAAE,OAAKA,EAAGjB,aAExC,EAAKZ,SAAS,CACZuC,MAAOW,EACPR,WAAW,K,EAIfM,uBAAyB,WAAO,IAExBG,EADY,EAAKvD,MAAf2C,MAC4Ba,MAAK,SAAAvB,GAAE,OAAIA,EAAGjB,aAElD,EAAKZ,SAAS,CACZ0C,UAAWS,K,kEAnGb,IAAME,EAAeC,aAAaC,QAXX,gBAYjBC,EAAcH,GAAgBI,KAAKC,MAAML,GAE3CG,GACF1C,KAAKd,SAAL,eACKwD,M,2CAMP,IAAMG,EAAmBF,KAAKG,UAAU9C,KAAKlB,OAE7C0D,aAAaO,QAxBU,eAwBkBF,K,+BA2FzC,OACE,6BAAS5C,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,kBAAC,EAAD,CAASP,QAASM,KAAKN,WAGzB,kBAAC,EAAD,CACEa,MAAOP,KAAKlB,MAAM2C,MAClBjB,OAAQR,KAAKlB,MAAMgD,WACnBrB,gBAAiBT,KAAKS,gBACtBC,aAAcV,KAAKlB,MAAM4B,aACzBC,mBAAoBX,KAAKW,mBACzBC,WAAYZ,KAAKY,aAGnB,kBAAC,EAAD,CACEa,MAAOzB,KAAKlB,MAAM2C,MAClBC,aAAc1B,KAAK0B,aACnBC,qBAAsB3B,KAAK2B,qBAC3BC,UAAW5B,KAAKlB,MAAM8C,iB,GAtIdxB,IAAMC,WCDxB2C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.8e3c6094.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    currentValue: '',\n  };\n\n  handleValue = (event) => {\n    this.setState({\n      currentValue: event.target.value,\n    });\n  };\n\n  handleAddTodo = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      currentValue: '',\n    });\n\n    if (this.state.currentValue.split(' ').join('')) {\n      this.props.addTodo({\n        title: this.state.currentValue,\n        id: +new Date(),\n        completed: false,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleAddTodo}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={this.state.currentValue}\n          onChange={this.handleValue}\n        />\n      </form>\n    );\n  }\n}\n\nexport default TodoApp;\n\nTodoApp.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoList = (\n  {\n    items,\n    filter,\n    changeCompleted,\n    isToggledAll,\n    changeAllCompleted,\n    removeTodo,\n  },\n) => {\n  const onToggle = (id) => {\n    changeCompleted(id);\n  };\n\n  const onFiltered = (arr) => {\n    if (filter === 'All') {\n      return arr;\n    }\n\n    if (filter === 'Active') {\n      return arr.filter(el => !el.completed);\n    }\n\n    if (filter === 'Completed') {\n      return arr.filter(el => el.completed);\n    }\n\n    return null;\n  };\n\n  const onRemove = (event) => {\n    removeTodo(+event.target.id);\n  };\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        checked={isToggledAll}\n        onChange={() => changeAllCompleted()}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {onFiltered(items).length === 0\n        || onFiltered(items).map(el => (\n          <li\n            key={el.id}\n            className={el.completed ? 'completed' : ''}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={`todo-${el.id}`}\n                checked={el.completed}\n                onChange={() => onToggle(el.id)}\n              />\n              <label htmlFor={`todo-${el.id}`}>{el.title}</label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                id={el.id}\n                onClick={onRemove}\n              />\n            </div>\n            <input type=\"text\" className=\"edit\" />\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  isToggledAll: PropTypes.bool.isRequired,\n  changeAllCompleted: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = (\n  {\n    todos,\n    handleFilter,\n    handleClearCompleted,\n    isVisible,\n  },\n) => {\n  const onFilter = (filterName) => {\n    handleFilter(filterName);\n  };\n\n  const onCompleted = () => {\n    handleClearCompleted();\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${todos.filter(el => el.completed === false)\n          .length} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className=\"selected\"\n            onClick={() => onFilter('All')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            onClick={() => onFilter('Active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={() => onFilter('Completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      {isVisible && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={onCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nexport default TodosFilter;\n\nTodosFilter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  handleFilter: PropTypes.func.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  isVisible: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport TodoApp from './components/TodoApp/TodoApp';\nimport TodoList from './components/TodoList/TodoList';\nimport TodosFilter from './components/TodosFilter/TodosFilter';\n\nconst LOCALSTORAGE_STATE = 'initialState';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    isToggledAll: false,\n    filterName: 'All',\n    isVisible: false,\n  };\n\n  componentDidMount() {\n    const initialState = localStorage.getItem(LOCALSTORAGE_STATE);\n    const parsedState = initialState && JSON.parse(initialState);\n\n    if (parsedState) {\n      this.setState({\n        ...parsedState,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    const stringifiedState = JSON.stringify(this.state);\n\n    localStorage.setItem(LOCALSTORAGE_STATE, stringifiedState);\n  }\n\n  addTodo = (newTodo) => {\n    this.setState(({ todos }) => ({\n      todos: [...todos, newTodo],\n      isToggledAll: false,\n    }));\n  };\n\n  changeCompleted = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map(el => (el.id === id\n        ? {\n          ...el,\n          completed: !el.completed,\n        }\n        : el)),\n      isToggledAll: false,\n    }), () => this.checkAnythingCompleted());\n  };\n\n  changeAllCompleted = () => {\n    if (this.state.todos.every(el => el.completed === false)) {\n      this.setState(state => ({\n        todos: state.todos.map(el => ({\n          ...el,\n          completed: !el.completed,\n        })),\n        isToggledAll: true,\n      }), () => this.checkAnythingCompleted());\n\n      return;\n    }\n\n    if (this.state.todos.every(el => el.completed === true)) {\n      this.setState(state => ({\n        todos: state.todos.map(el => ({\n          ...el,\n          completed: !el.completed,\n        })),\n        isToggledAll: false,\n      }), () => this.checkAnythingCompleted());\n\n      return;\n    }\n\n    this.setState(state => ({\n      todos: state.todos.map(el => ({\n        ...el,\n        completed: true,\n      })),\n      isToggledAll: true,\n    }));\n  };\n\n  handleFilter = (filterName) => {\n    this.setState({\n      filterName,\n    });\n  };\n\n  removeTodo = (id) => {\n    const { todos } = this.state;\n    const newArray = todos.filter(el => el.id !== id);\n\n    this.setState({\n      todos: newArray,\n    });\n  };\n\n  handleClearCompleted = () => {\n    const { todos } = this.state;\n    const newArray = todos.filter(el => !el.completed);\n\n    this.setState({\n      todos: newArray,\n      isVisible: false,\n    });\n  };\n\n  checkAnythingCompleted = () => {\n    const { todos } = this.state;\n    const isAnyElementCompleted = todos.some(el => el.completed);\n\n    this.setState({\n      isVisible: isAnyElementCompleted,\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <TodoApp addTodo={this.addTodo} />\n        </header>\n\n        <TodoList\n          items={this.state.todos}\n          filter={this.state.filterName}\n          changeCompleted={this.changeCompleted}\n          isToggledAll={this.state.isToggledAll}\n          changeAllCompleted={this.changeAllCompleted}\n          removeTodo={this.removeTodo}\n        />\n\n        <TodosFilter\n          todos={this.state.todos}\n          handleFilter={this.handleFilter}\n          handleClearCompleted={this.handleClearCompleted}\n          isVisible={this.state.isVisible}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}